classdef AircraftControl
    properties
        % PID controllers for position and velocity loops
        vn_from_pn
        ve_from_pe
        vs_from_ps
        
        % PID controllers for velocity to acceleration loops
        acc_n_from_vn
        acc_e_from_ve
        acc_s_from_vs
        
        % PID controllers for angle to angular rate loops
        roll_rate_from_roll
        pitch_rate_from_pitch
        yaw_rate_from_yaw
        
        % PID controllers for angular rate to moment loops
        Mx_from_roll_rate
        My_from_pitch_rate
        Mz_from_yaw_rate
        
        % PD controllers for roll and pitch with rate
        roll_from_aileronroll
        pitch_from_elevator
        
        % PI controllers for course, altitude
        course_from_roll
        altitude_from_pitch
        
        % Transfer function for yaw damper
        yaw_damper
        
        % PID controller for airspeed
        airspeed_from_throttle
    end
    
    methods
        % Constructor
        function obj = AircraftControl(params)
            % Initialize PID controllers for position loops
            obj.vn_from_pn = PIDControl(params.pn_kp, params.pn_ki, params.pn_kd, params.Ts, params.sigma, params.vx_sat_limit);
            obj.ve_from_pe = PIDControl(params.pe_kp, params.pe_ki, params.pe_kd, params.Ts, params.sigma, params.vy_sat_limit);
            obj.vs_from_ps = PIDControl(params.pd_kp, params.pd_ki, params.pd_kd, params.Ts, params.sigma, params.vz_sat_limit);
            
            % Initialize PID controllers for velocity to acceleration loops
            obj.acc_n_from_vn = PIDControl(params.vx_kp, params.vx_ki, params.vx_kd, params.Ts, params.sigma, params.acc_x_sat_limit);
            obj.acc_e_from_ve = PIDControl(params.vy_kp, params.vy_ki, params.vy_kd, params.Ts, params.sigma, params.acc_y_sat_limit);
            obj.acc_s_from_vs = PIDControl(params.vz_kp, params.vz_ki, params.vz_kd, params.Ts, params.sigma, params.acc_z_sat_limit);
            
            % Initialize PID controllers for angle to angular rate loops
            obj.roll_rate_from_roll = PIDControl(params.roll_kp, params.roll_ki, params.roll_kd, params.Ts, params.sigma, params.roll_rate_sat_limit);
            obj.pitch_rate_from_pitch = PIDControl(params.pitch_kp, params.pitch_ki, params.pitch_kd, params.Ts, params.sigma, params.pitch_rate_sat_limit);
            obj.yaw_rate_from_yaw = PIDControl(params.yaw_kp, params.yaw_ki, params.yaw_kd, params.Ts, params.sigma, params.yaw_rate_sat_limit);
            
            % Initialize PID controllers for angular rate to moment loops
            obj.Mx_from_roll_rate = PIDControl(params.roll_rate_kp, params.roll_rate_ki, params.roll_rate_kd, params.Ts, params.sigma, 0);
            obj.My_from_pitch_rate = PIDControl(params.pitch_rate_kp, params.pitch_rate_ki, params.pitch_rate_kd, params.Ts, params.sigma, 0);
            obj.Mz_from_yaw_rate = PIDControl(params.yaw_rate_kp, params.yaw_rate_ki, params.yaw_rate_kd, params.Ts, params.sigma, 0);
            
            % Initialize PD controllers for roll and pitch with rate
            obj.roll_from_aileron = PDControlWithRate(params.roll_kp, params.roll_kd, params.phi_max);
            obj.pitch_from_elevator = PDControlWithRate(params.pitch_kp, params.pitch_kd, params.theta_max);
            
            % Initialize PI controllers for course and altitude
            obj.course_from_roll = PIControl(params.course_kp, params.course_ki, params.Ts, params.course_max);
            obj.altitude_from_pitch = PIControl(params.altitude_kp, params.altitude_ki, params.Ts, np2rad(30));
            
            % % Initialize yaw damper transfer function
            % obj.yaw_damper = TransferFunction(params.yaw_damper_kr, [1, params.yaw_damper_p_wo], params.Ts);
            % 
            % Initialize PID controller for airspeed
            obj.airspeed_from_throttle = PIDControl(params.airspeed_throttle_kp, params.airspeed_throttle_ki, ...
                                                     params.airspeed_throttle_kd, params.Ts, params.sigma, 1.0);
        end
    end
end

% Conversion helper function for radians
function r = np2rad(deg)
    r = deg * pi / 180;  % Convert degrees to radians
end
